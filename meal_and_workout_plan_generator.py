# -*- coding: utf-8 -*-
"""Meal & Workout Plan Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_zre5RXS--F1qNS6cQcIfsSHA8rXSHhk

# **AI Diet & Workout Planner**
## **Author:** Saubhagya Srivastav
## **Date:** 02 MARCH 2025

## MEAL PLAN GENERATOR
"""

!pip install pandas openai

import sqlite3
import pandas as pd

# Connect to the database
conn = sqlite3.connect("/content/fitness_planner(1).db")

# Load food data
df_food = pd.read_sql_query("SELECT * FROM food;", conn)

# Close connection
conn.close()

# Display first 5 rows
df_food.head()

import google.generativeai as genai
from google.colab import userdata
ap=userdata.get('GOOGLE_API_KEY')

# 🔑 Set up API Key
genai.configure(api_key=ap)

# Use the latest available Gemini model
model = genai.GenerativeModel("gemini-1.5-pro-latest")

def generate_meal_plan(diet_type, calories, protein):
    """
    Generate a meal plan using Gemini AI.
    """
    prompt = f"Suggest 3 high-protein {diet_type} meals under {calories} kcal."

    try:
        response = model.generate_content(prompt)  # Generate response
        ai_meals = response.text.strip().split("\n")  # Process AI response
        return ai_meals
    except Exception as e:
        print("❌ Error:", e)
        return ["Error generating meal plan. Check API key & model availability."]

# Example usage
meal_plan = generate_meal_plan(diet_type="Vegetarian", calories=2500, protein=150)

# Print meal plan
print("🔹 Suggested Meal Plan:")
for meal in meal_plan:
    print(f"{meal}")

"""## WORKOUT PLAN GENERATOR"""

import sqlite3
import pandas as pd

# Connect to the database
conn = sqlite3.connect("/content/fitness_planner(1).db")

# Load workout data
df_workout = pd.read_sql_query("SELECT * FROM exercise;", conn)

# Close connection
conn.close()

# Display first 5 rows
df_workout.head()

import random
import google.generativeai as genai
from google.colab import userdata

# 🔑 Configure Gemini AI
ap = userdata.get('GOOGLE_API_KEY')
genai.configure(api_key=ap)

# ✅ Use the latest Gemini model
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# ✅ Define mapped muscle groups
muscle_group_mapping = {
    "Chest": ["Chest"],
    "Back": ["Lats", "Middle Back", "Lower Back"],
    "Legs": ["Quadriceps", "Hamstrings", "Calves", "Glutes", "Adductors", "Abductors"],
    "Shoulders": ["Shoulders", "Traps"],
    "Arms": ["Biceps", "Triceps", "Forearms"],
    "Core": ["Abdominals"]
}

def generate_workout_routine(goal="Muscle Gain", equipment="Dumbbells", level="Intermediate"):
    """Generate a structured workout plan with visually appealing formatting."""

    # ✅ Ensure dataset is valid
    if df_workout.empty:
        return "❌ **Error:** No workout data found in the database!"

    # ✅ Convert column names to lowercase for consistency
    df_workout.columns = df_workout.columns.str.lower()

    # ✅ Ensure correct column names exist
    if "bodypart" not in df_workout.columns or "title" not in df_workout.columns:
        return "❌ **Error:** Missing required columns in dataset!"

    # ✅ Filter dataset based on user input
    filtered_workouts = df_workout[
        (df_workout["equipment"].str.contains(equipment, case=False, na=False)) &
        (df_workout["level"].str.contains(level, case=False, na=False))
    ]

    # ✅ Handle case where no exercises match
    if filtered_workouts.empty:
        return f"❌ **Error:** No workouts found for {equipment}, {level} level."

    # ✅ Select exercises per mapped muscle group
    workout_plan = {}
    for group, muscles in muscle_group_mapping.items():
        muscle_workouts = filtered_workouts[filtered_workouts["bodypart"].isin(muscles)]["title"]
        workout_plan[group] = muscle_workouts.sample(2).tolist() if not muscle_workouts.empty else ["❌ No exercises found"]

    # ✅ Create a well-structured output
    formatted_workout_plan = "\n\n".join(
        [f"### **{muscle}**\n" + "\n".join([f"- {exercise}" for exercise in exercises])
         for muscle, exercises in workout_plan.items()]
    )

    # ✅ Generate AI-enhanced structured plan
    prompt = f"""
    Given these exercises: {workout_plan},
    Create a structured **5-day workout plan** for {goal}.
    """
    ai_response = model.generate_content(prompt)

    # ✅ Return structured output for app display
    return f"""
## 🏋️ Personalized Workout Routine

{formatted_workout_plan}

---

## 📋 AI-Generated 5-Day Workout Plan
{ai_response.text}
"""

# ✅ Example Usage
result = generate_workout_routine("Muscle Gain", "dumbbell", "intermediate")
print(result)
