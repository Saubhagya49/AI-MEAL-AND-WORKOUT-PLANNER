# -*- coding: utf-8 -*-
"""Meal & Workout Plan Generator.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_zre5RXS--F1qNS6cQcIfsSHA8rXSHhk

# **AI Diet & Workout Planner**
## **Author:** Saubhagya Srivastav
## **Date:** 02 MARCH 2025

## MEAL PLAN GENERATOR
"""



import sqlite3
import pandas as pd
import os

DB_PATH = os.path.join(os.path.dirname(__file__), "fitness_planner(1).db")
conn = sqlite3.connect(DB_PATH)

# Load food data
df_food = pd.read_sql_query("SELECT * FROM food;", conn)

# Close connection
conn.close()

# Display first 5 rows
df_food.head()
import streamlit as st
import google.generativeai as genai
ap = st.secrets["api"]["GOOGLE_API_KEY"]

# üîë Set up API Key
genai.configure(api_key=ap)

# Use the latest available Gemini model
model = genai.GenerativeModel("gemini-1.5-pro-latest")
def calculate_calories_and_protein(goal, age, height, weight, activity_level=1.55):
    """
    Calculate daily calorie and protein needs based on user inputs.

    - `goal`: "musclegain", "maintainweight", or "bulkupfast"
    - `age`: Age in years
    - `height`: Height in cm
    - `weight`: Weight in kg
    - `activity_level`: Default to moderate (1.55)
    """
    # Mifflin-St Jeor BMR Formula
    bmr = 10 * weight + 6.25 * height - 5 * age + 5  # (For males, use -161 for females)

    # Adjust for activity level
    maintenance_calories = bmr * activity_level

    # Adjust based on goal
    if goal == "musclegain":
        total_calories = maintenance_calories + 300  # Small calorie surplus
        protein_grams = weight * 1.6  # Moderate protein intake
    elif goal == "bulkupfast":
        total_calories = maintenance_calories + 600  # Large calorie surplus
        protein_grams = weight * 2.0  # Higher protein intake
    else:  # Maintain weight
        total_calories = maintenance_calories
        protein_grams = weight * 1.2  # Lower protein intake

    return int(total_calories), int(protein_grams)


def generate_meal_plan(diet_type, goal, age, height, weight):
    """
    Generate a high-protein meal plan based on diet type, calorie needs, and protein target.
    """
    # Calculate Calories & Protein
    calories, protein = calculate_calories_and_protein(goal, age, height, weight)

    prompt = f"Suggest 3 high-protein Indian {diet_type} meals under {calories} kcal with at least {protein}g of protein per day."




meal_plan = generate_meal_plan(diet_type, goal, age, height, weight)

# Print Meal Plan
print("\nüçΩÔ∏è Suggested Meal Plan:")
for meal in meal_plan:
    print(meal)

"""## WORKOUT PLAN GENERATOR"""

import sqlite3
import pandas as pd

# Connect to the database
DB_PATH = os.path.join(os.path.dirname(__file__), "fitness_planner(1).db")
conn = sqlite3.connect(DB_PATH)

# Load workout data
df_workout = pd.read_sql_query("SELECT * FROM exercise;", conn)

# Close connection
conn.close()

# Display first 5 rows
df_workout.head()

import random
import google.generativeai as genai


# üîë Configure Gemini AI
ap = st.secrets["api"]["GOOGLE_API_KEY"]
genai.configure(api_key=ap)

# ‚úÖ Use the latest Gemini model
model = genai.GenerativeModel("gemini-1.5-pro-latest")

# ‚úÖ Define mapped muscle groups
muscle_group_mapping = {
    "Chest": ["Chest"],
    "Back": ["Lats", "Middle Back", "Lower Back"],
    "Legs": ["Quadriceps", "Hamstrings", "Calves", "Glutes", "Adductors", "Abductors"],
    "Shoulders": ["Shoulders", "Traps"],
    "Arms": ["Biceps", "Triceps", "Forearms"],
    "Core": ["Abdominals"]
}

def generate_workout_routine(goal, equipment, level):
    """Generate a structured workout plan with visually appealing formatting."""

    # ‚úÖ Ensure dataset is valid
    if df_workout.empty:
        return "‚ùå **Error:** No workout data found in the database!"

    # ‚úÖ Convert column names to lowercase for consistency
    df_workout.columns = df_workout.columns.str.lower()

    # ‚úÖ Ensure correct column names exist
    if "bodypart" not in df_workout.columns or "title" not in df_workout.columns:
        return "‚ùå **Error:** Missing required columns in dataset!"

    # ‚úÖ Filter dataset based on user input
    filtered_workouts = df_workout[
        (df_workout["equipment"].str.contains(equipment, case=False, na=False)) &
        (df_workout["level"].str.contains(level, case=False, na=False))
    ]

    # ‚úÖ Handle case where no exercises match
    if filtered_workouts.empty:
        return f"‚ùå **Error:** No workouts found for {equipment}, {level} level."

    # ‚úÖ Select exercises per mapped muscle group
    workout_plan = {}
    for group, muscles in muscle_group_mapping.items():
        muscle_workouts = filtered_workouts[filtered_workouts["bodypart"].isin(muscles)]["title"]
        workout_plan[group] = muscle_workouts.sample(2).tolist() if not muscle_workouts.empty else ["‚ùå No exercises found"]

    # ‚úÖ Create a well-structured output
    formatted_workout_plan = "\n\n".join(
        [f"### **{muscle}**\n" + "\n".join([f"- {exercise}" for exercise in exercises])
         for muscle, exercises in workout_plan.items()]
    )

    # ‚úÖ Generate AI-enhanced structured plan
    prompt = f"""
    Given these exercises: {workout_plan},
    Create a structured **5-day workout plan** for {goal}.
    """
    ai_response = model.generate_content(prompt)

    # ‚úÖ Return structured output for app display
    return f"""
## üèãÔ∏è Personalized Workout Routine

{formatted_workout_plan}

---

## üìã AI-Generated 5-Day Workout Plan
{ai_response.text}
"""

# ‚úÖ Example Usage
result = generate_workout_routine("Muscle Gain", "dumbbell", "intermediate")
print(result)
